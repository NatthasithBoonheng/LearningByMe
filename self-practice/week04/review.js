// üü¢ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô)

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 5 ‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (length) ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏ô‡∏±‡πâ‡∏ô

function findLength(arr){
    return arr.length
}

// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô sumArray(arr) ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß

function sumArray(arr){
    return arr.reduce((x,y)=> x + y ,0)
}

// ‡πÉ‡∏ä‡πâ .map() ‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå [1, 2, 3, 4] ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô [2, 4, 6, 8]

let Nums1 = [1,2,3,4,5]
Num1.map((x)=>x*2)

// ‡πÉ‡∏ä‡πâ .filter() ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå [5, 6, 7, 8, 9, 10]

let Nums2 = [5,6,7,8,9,10]
Nums2.filter((x)=>x%2 == 0 )

// ‡πÉ‡∏ä‡πâ .find() ‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50 ‡πÉ‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå [10, 20, 55, 60, 40]

[10,20,55,60,40].find((x)=> x > 50)

// üü° ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á (Object & Function)

// ‡∏™‡∏£‡πâ‡∏≤‡∏á object student ‡∏ó‡∏µ‡πà‡∏°‡∏µ property name, age, ‡πÅ‡∏•‡∏∞ grade ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ grade

let student = {
    name : "Natty",
    age : 26,
    grade : 6
}
student.grade

// ‡πÄ‡∏û‡∏¥‡πà‡∏° property email ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô object student ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠ 6

student.email = "Natty12345@gmail.com"

// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô isAdult(person) ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö object ‡∏ó‡∏µ‡πà‡∏°‡∏µ property age ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ true ‡∏ñ‡πâ‡∏≤‡∏≠‡∏≤‡∏¢‡∏∏‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 18

function isAdult(person){
    return person.age > 18
}

// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getKeys(obj) ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠ key ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô object

function getKeys(obj){
    return obj.keys()
}

// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô mergeObjects(obj1, obj2) ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏° object 2 ‡∏ï‡∏±‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô

function mergeObjects(obj1, obj2){
    return {...obj1,...obj2}
} // IMPORTANT ALERT ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏•‡∏∑‡∏°‡∏ö‡πà‡∏≠‡∏¢‡∏ô‡∏∞‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ ****

// üü† ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢ (Callback & Higher Order Function)

// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô applyOperation(a, b, operation) ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô operation ‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 2 ‡∏ï‡∏±‡∏ß

function applyOperation(a, b, operation){
    return operation(a,b)
}

// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô doTwice(fn) ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏°‡∏±‡∏ô 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á

function doTwice(fn){
    fn()
    fn()
}

// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô mapArray(arr, callback) ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ .map()

function mapArray(arr, callback){
    let mapped = []
    for(let i of arr){
        mapped.push((callback)(i))
    }
    return mapped
}

// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô filterArray(arr, callback) ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ .filter()

function filterArray(arr, callback){
    let filted = []
    for(let i of arr){
        filted.push((callback)(i))
    }
    return filted
}

// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô compose(f, g) ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö 2 ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏≠‡∏≤ g ‡∏ó‡∏≥‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ f)

function compose(f, g){
    return f(g())
}

